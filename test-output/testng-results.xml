<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="1" total="11" passed="9">
  <reporter-output>
  </reporter-output>
  <suite name="QA Automation Testing Assignment" duration-ms="63362" started-at="2020-09-04T08:45:29Z" finished-at="2020-09-04T08:46:33Z">
    <groups>
    </groups>
    <test name="Starting" duration-ms="6575" started-at="2020-09-04T08:45:29Z" finished-at="2020-09-04T08:45:36Z">
      <class name="start.StartingAutomation">
        <test-method status="PASS" signature="start()[pri:0, instance:start.StartingAutomation@7e0b0338]" name="start" duration-ms="6450" started-at="2020-09-04T08:45:29Z" finished-at="2020-09-04T08:45:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- start -->
        <test-method status="PASS" signature="actions(org.testng.ITestResult)[pri:0, instance:start.StartingAutomation@7e0b0338]" name="actions" is-config="true" duration-ms="4" started-at="2020-09-04T08:45:36Z" finished-at="2020-09-04T08:45:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=start status=SUCCESS method=StartingAutomation.start()[pri:0, instance:start.StartingAutomation@7e0b0338] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- actions -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:start.StartingAutomation@7e0b0338]" name="getResult" is-config="true" duration-ms="103" started-at="2020-09-04T08:45:36Z" finished-at="2020-09-04T08:45:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=start status=SUCCESS method=StartingAutomation.start()[pri:0, instance:start.StartingAutomation@7e0b0338] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- start.StartingAutomation -->
    </test> <!-- Starting -->
    <test name="LoadUrl" duration-ms="8775" started-at="2020-09-04T08:45:36Z" finished-at="2020-09-04T08:45:45Z">
      <class name="testsCases.TCLoadUrl">
        <test-method status="PASS" signature="urlLunch()[pri:0, instance:testsCases.TCLoadUrl@6f1fba17]" name="urlLunch" duration-ms="7178" started-at="2020-09-04T08:45:36Z" finished-at="2020-09-04T08:45:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- urlLunch -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:testsCases.TCLoadUrl@6f1fba17]" name="getResult" is-config="true" duration-ms="225" started-at="2020-09-04T08:45:43Z" finished-at="2020-09-04T08:45:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=urlLunch status=SUCCESS method=TCLoadUrl.urlLunch()[pri:0, instance:testsCases.TCLoadUrl@6f1fba17] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="afterPopUpClose()[pri:2, instance:testsCases.TCLoadUrl@6f1fba17]" name="afterPopUpClose" duration-ms="337" started-at="2020-09-04T08:45:43Z" finished-at="2020-09-04T08:45:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterPopUpClose -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:testsCases.TCLoadUrl@6f1fba17]" name="getResult" is-config="true" duration-ms="231" started-at="2020-09-04T08:45:44Z" finished-at="2020-09-04T08:45:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=afterPopUpClose status=SUCCESS method=TCLoadUrl.afterPopUpClose()[pri:2, instance:testsCases.TCLoadUrl@6f1fba17] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="searchItem()[pri:3, instance:testsCases.TCLoadUrl@6f1fba17]" name="searchItem" duration-ms="567" started-at="2020-09-04T08:45:44Z" finished-at="2020-09-04T08:45:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchItem -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:testsCases.TCLoadUrl@6f1fba17]" name="getResult" is-config="true" duration-ms="230" started-at="2020-09-04T08:45:44Z" finished-at="2020-09-04T08:45:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=searchItem status=SUCCESS method=TCLoadUrl.searchItem()[pri:3, instance:testsCases.TCLoadUrl@6f1fba17] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- testsCases.TCLoadUrl -->
    </test> <!-- LoadUrl -->
    <test name="ApplyFilter" duration-ms="43540" started-at="2020-09-04T08:45:45Z" finished-at="2020-09-04T08:46:28Z">
      <class name="testsCases.TcApplyFilter">
        <test-method status="PASS" signature="selectMinRangeFilter()[pri:1, instance:testsCases.TcApplyFilter@3b0143d3]" name="selectMinRangeFilter" duration-ms="3295" started-at="2020-09-04T08:45:45Z" finished-at="2020-09-04T08:45:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectMinRangeFilter -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:testsCases.TcApplyFilter@3b0143d3]" name="getResult" is-config="true" duration-ms="160" started-at="2020-09-04T08:45:48Z" finished-at="2020-09-04T08:45:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=selectMinRangeFilter status=SUCCESS method=TcApplyFilter.selectMinRangeFilter()[pri:1, instance:testsCases.TcApplyFilter@3b0143d3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="selectMaxRangeFilter()[pri:2, instance:testsCases.TcApplyFilter@3b0143d3]" name="selectMaxRangeFilter" duration-ms="674" started-at="2020-09-04T08:45:48Z" finished-at="2020-09-04T08:45:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectMaxRangeFilter -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:testsCases.TcApplyFilter@3b0143d3]" name="getResult" is-config="true" duration-ms="142" started-at="2020-09-04T08:45:49Z" finished-at="2020-09-04T08:45:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=selectMaxRangeFilter status=SUCCESS method=TcApplyFilter.selectMaxRangeFilter()[pri:2, instance:testsCases.TcApplyFilter@3b0143d3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="selectRam()[pri:3, instance:testsCases.TcApplyFilter@3b0143d3]" name="selectRam" duration-ms="1294" started-at="2020-09-04T08:45:49Z" finished-at="2020-09-04T08:45:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectRam -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:testsCases.TcApplyFilter@3b0143d3]" name="getResult" is-config="true" duration-ms="172" started-at="2020-09-04T08:45:50Z" finished-at="2020-09-04T08:45:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=selectRam status=SUCCESS method=TcApplyFilter.selectRam()[pri:3, instance:testsCases.TcApplyFilter@3b0143d3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="selectProcessor()[pri:4, instance:testsCases.TcApplyFilter@3b0143d3]" name="selectProcessor" duration-ms="37657" started-at="2020-09-04T08:45:50Z" finished-at="2020-09-04T08:46:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectProcessor -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:testsCases.TcApplyFilter@3b0143d3]" name="getResult" is-config="true" duration-ms="137" started-at="2020-09-04T08:46:28Z" finished-at="2020-09-04T08:46:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=selectProcessor status=SUCCESS method=TcApplyFilter.selectProcessor()[pri:4, instance:testsCases.TcApplyFilter@3b0143d3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- testsCases.TcApplyFilter -->
    </test> <!-- ApplyFilter -->
    <test name="StorePhonePrice" duration-ms="1809" started-at="2020-09-04T08:46:28Z" finished-at="2020-09-04T08:46:30Z">
      <class name="testsCases.TcStorePhonePrice">
        <test-method status="PASS" signature="storePhoneName()[pri:0, instance:testsCases.TcStorePhonePrice@3a5ed7a6]" name="storePhoneName" duration-ms="1676" started-at="2020-09-04T08:46:28Z" finished-at="2020-09-04T08:46:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storePhoneName -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:testsCases.TcStorePhonePrice@3a5ed7a6]" name="getResult" is-config="true" duration-ms="131" started-at="2020-09-04T08:46:30Z" finished-at="2020-09-04T08:46:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=storePhoneName status=SUCCESS method=TcStorePhonePrice.storePhoneName()[pri:0, instance:testsCases.TcStorePhonePrice@3a5ed7a6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- testsCases.TcStorePhonePrice -->
    </test> <!-- StorePhonePrice -->
    <test name="Closing" duration-ms="2640" started-at="2020-09-04T08:46:30Z" finished-at="2020-09-04T08:46:33Z">
      <class name="end.ClosingAutomation">
        <test-method status="PASS" signature="setUp()[pri:0, instance:end.ClosingAutomation@7b49cea0]" name="setUp" is-config="true" duration-ms="159" started-at="2020-09-04T08:45:29Z" finished-at="2020-09-04T08:45:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="quit()[pri:0, instance:end.ClosingAutomation@7b49cea0]" name="quit" duration-ms="2603" started-at="2020-09-04T08:46:30Z" finished-at="2020-09-04T08:46:33Z">
          <exception class="org.openqa.selenium.NoSuchSessionException">
            <message>
              <![CDATA[Tried to run command without establishing a connection
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'TARIT', ip: '192.168.43.131', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '1.8.0_171'
Driver info: org.openqa.selenium.firefox.FirefoxDriver
Capabilities {acceptInsecureCerts: true, browserName: firefox, browserVersion: 69.0, javascriptEnabled: true, moz:accessibilityChecks: false, moz:buildID: 20190827005903, moz:geckodriverVersion: 0.24.0, moz:headless: false, moz:processID: 13792, moz:profile: C:\Users\Tray\AppData\Local..., moz:shutdownTimeout: 60000, moz:useNonSpecCompliantPointerOrigin: false, moz:webdriverClick: true, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, platformVersion: 6.3, rotatable: false, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 9e3b4b9d-4ff6-4973-9032-96d7c95c0f24]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchSessionException: Tried to run command without establishing a connection
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'TARIT', ip: '192.168.43.131', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '1.8.0_171'
Driver info: org.openqa.selenium.firefox.FirefoxDriver
Capabilities {acceptInsecureCerts: true, browserName: firefox, browserVersion: 69.0, javascriptEnabled: true, moz:accessibilityChecks: false, moz:buildID: 20190827005903, moz:geckodriverVersion: 0.24.0, moz:headless: false, moz:processID: 13792, moz:profile: C:\Users\Tray\AppData\Local..., moz:shutdownTimeout: 60000, moz:useNonSpecCompliantPointerOrigin: false, moz:webdriverClick: true, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, platformVersion: 6.3, rotatable: false, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 9e3b4b9d-4ff6-4973-9032-96d7c95c0f24
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)
at org.openqa.selenium.remote.RemoteWebDriver.quit(RemoteWebDriver.java:452)
at utils.DriverWorks.quitDriver(DriverWorks.java:111)
at end.ClosingAutomation.quit(ClosingAutomation.java:33)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:54)
at org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:44)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchSessionException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- quit -->
        <test-method status="FAIL" signature="getResult(org.testng.ITestResult)[pri:0, instance:end.ClosingAutomation@7b49cea0]" name="getResult" is-config="true" duration-ms="2" started-at="2020-09-04T08:46:33Z" finished-at="2020-09-04T08:46:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=quit status=FAILURE method=ClosingAutomation.quit()[pri:0, instance:end.ClosingAutomation@7b49cea0] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchSessionException">
            <message>
              <![CDATA[Session ID is null. Using WebDriver after calling quit()?
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'TARIT', ip: '192.168.43.131', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '1.8.0_171'
Driver info: driver.version: RemoteWebDriver]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchSessionException: Session ID is null. Using WebDriver after calling quit()?
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'TARIT', ip: '192.168.43.131', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '1.8.0_171'
Driver info: driver.version: RemoteWebDriver
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:125)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)
at utils.DriverWorks.takeSnapShot(DriverWorks.java:324)
at utils.Reporting.getResult(Reporting.java:69)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:458)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchSessionException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:end.ClosingAutomation@7b49cea0]" name="tearDown" is-config="true" duration-ms="314" started-at="2020-09-04T08:46:33Z" finished-at="2020-09-04T08:46:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- end.ClosingAutomation -->
    </test> <!-- Closing -->
  </suite> <!-- QA Automation Testing Assignment -->
</testng-results>
